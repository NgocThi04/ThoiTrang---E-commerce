@model Fashion.Helpers.PaginatedList<Fashion.Models.SanPham>

@{
    ViewData["Title"] = "Sản Phẩm Yêu Thích";
    var favoriteProductIds = Model.Select(p => p.Id).ToList();
}

@section Styles {
<style>
    :root {
        --primary-text: #333;
        --secondary-text: #666;
        --accent-color: #007bff;
        --danger-color: #dc3545;
        --star-color: #ffc107;
        --bg-color: #f5f5f5;
        --card-bg: #fff;
        --border-color: #ddd;
    }

    body {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background-color: var(--bg-color);
        color: var(--primary-text);
        line-height: 1.6;
    }

    .container {
        max-width: 1200px;
        margin: 20px auto;
        padding: 0 15px;
    }

    .page-title {
        text-align: center;
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 40px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 20px;
        margin-bottom: 40px;
    }

    .product-card {
        background: var(--card-bg);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        position: relative;
    }

    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }

    .product-image {
        width: 100%;
        height: 200px;
        background: #f8f9fa;
        position: relative;
        overflow: hidden;
    }

    a.product-link {
        text-decoration: none;
        color: inherit;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .discount-label {
        position: absolute;
        top: 10px;
        left: 10px;
        background: var(--primary-text);
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 11px;
        font-weight: bold;
    }

    .favorite-icon {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 24px;
        height: 24px;
        cursor: pointer;
        z-index: 2;
        transition: all 0.2s ease;
    }

    .favorite-icon svg {
        width: 100%;
        height: 100%;
        filter: drop-shadow(0 1px 2px rgba(0,0,0,0.3));
    }

    .favorite-icon:hover {
        transform: scale(1.1);
    }

    .favorite-icon.favorited svg {
        fill: var(--danger-color);
        stroke: var(--danger-color);
    }

    .favorite-icon:not(.favorited) svg {
        fill: none;
        stroke: white;
        stroke-width: 2;
    }

    .product-info {
        padding: 15px;
    }

    .product-name {
        font-size: 14px;
        font-weight: 500;
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .product-rating {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
    }

    .product-stars {
        color: var(--star-color);
        font-size: 12px;
        margin-right: 8px;
    }

    .rating-text {
        font-size: 11px;
        color: var(--secondary-text);
    }

    .product-price {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .current-price {
        font-size: 16px;
        font-weight: 600;
        color: var(--danger-color);
    }

    .original-price {
        font-size: 12px;
        color: var(--secondary-text);
        text-decoration: line-through;
    }

    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 40px;
    }

    .pagination .page-link {
        padding: 8px 12px;
        border: 1px solid var(--border-color);
        background: var(--card-bg);
        color: var(--secondary-text);
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        text-decoration: none;
    }

    .pagination .page-link:hover {
        background: #f8f9fa;
    }

    .pagination .page-link.active {
        background: var(--accent-color);
        color: white;
        border-color: var(--accent-color);
    }

    .pagination .page-link.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .no-favorites {
        text-align: center;
        padding: 50px 20px;
        background: var(--card-bg);
        border-radius: 8px;
    }

    @@media (max-width: 1024px) { .products-grid { grid-template-columns: repeat(3, 1fr); gap: 15px; } }
    @@media (max-width: 768px) { .products-grid { grid-template-columns: repeat(2, 1fr); gap: 15px; } }
    @@media (max-width: 480px) { .products-grid { grid-template-columns: 1fr; gap: 15px; } }
</style>
}

<div class="container">
    <h1 class="page-title">Sản Phẩm Yêu Thích Của Bạn</h1>

    @if (!Model.Any())
    {
        <div class="no-favorites">
            <p>Bạn chưa có sản phẩm yêu thích nào.</p>
            <a asp-action="Index" asp-controller="SanPham">Khám phá sản phẩm</a>
        </div>
    }
    else
    {
        <div class="products-grid">
            @foreach (var product in Model)
            {
                <div class="product-card" id="product-card-@product.Id">
                     <a asp-action="Details" asp-controller="SanPham" asp-route-id="@product.Id" class="product-link">
                        <div class="product-image">
                            @if (product.GiaGiam.HasValue && product.GiaGiam < product.Gia)
                            {
                                var salePercent = (int)Math.Round((1 - (product.GiaGiam.Value / product.Gia)) * 100);
                                <span class="discount-label">@salePercent%</span>
                            }
                            <div class="favorite-icon favorited" onclick="toggleFavorite(this, event, @product.Id)">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
                                </svg>
                            </div>
                            <img src="@(string.IsNullOrEmpty(product.DuongDanAnh) ? "/images/placeholder.png" : product.DuongDanAnh)" alt="@product.Ten">
                        </div>
                     </a>
                    <div class="product-info">
                         <a asp-action="Details" asp-controller="SanPham" asp-route-id="@product.Id" class="product-link">
                            <h4 class="product-name">@product.Ten</h4>
                            <div class="product-rating">
                                <span class="product-stars">
                                    @{
                                        var avgRating = product.DanhGias.Any() ? product.DanhGias.Average(d => d.SoSao) : 0;
                                        for(int i = 1; i <= 5; i++) {
                                            if(i <= avgRating) {<span>★</span>} else {<span style="color: #ccc">★</span>}
                                        }
                                    }
                                </span>
                                <span class="rating-text">@product.SoLuongBan Lượt Bán</span>
                            </div>
                            <div class="product-price">
                                @if (product.GiaGiam.HasValue && product.GiaGiam < product.Gia)
                                {
                                    <span class="current-price">@product.GiaGiam.Value.ToString("N0")đ</span>
                                    <span class="original-price">@product.Gia.ToString("N0")đ</span>
                                }
                                else
                                {
                                    <span class="current-price">@product.Gia.ToString("N0")đ</span>
                                }
                            </div>
                        </a>
                    </div>
                </div>
            }
        </div>
         
        <div class="pagination">
            @{
                var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
                var nextDisabled = !Model.HasNextPage ? "disabled" : "";
            }

            <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)"
               class="page-link @prevDisabled">
                &laquo; Trước
            </a>

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <a asp-action="Index" asp-route-pageNumber="@i"
                   class="page-link @(i == Model.PageIndex ? "active" : "")">
                    @i
                </a>
            }

            <a asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)"
               class="page-link @nextDisabled">
                Sau &raquo;
            </a>
        </div>
    }
</div>

@section Scripts {
<script>
    async function toggleFavorite(element, event, productId) {
        event.preventDefault();
        event.stopPropagation();

        // Lấy anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        
        // Tạo form data để gửi token đúng cách
        const formData = new FormData();
        formData.append('__RequestVerificationToken', token);

        const response = await fetch(`/YeuThich/Toggle/${productId}`, {
            method: 'POST',
            body: formData
        });

        const result = await response.json();

        if (result.success) {
            const isFavorited = result.favorited;
            element.classList.toggle('favorited', isFavorited);

            // On the favorites page, if an item is un-favorited, remove it from the view
            if (!isFavorited) {
                showMessage('Đã xóa khỏi danh sách yêu thích!', 'info');
                const card = document.getElementById(`product-card-${productId}`);
                if (card) {
                    card.style.transition = 'opacity 0.5s ease';
                    card.style.opacity = '0';
                    setTimeout(() => card.remove(), 500);
                }
            }
        } else {
            if (result.redirectTo) {
                showMessage('Vui lòng đăng nhập để sử dụng tính năng yêu thích!', 'error');
                setTimeout(() => {
                    window.location.href = result.redirectTo;
                }, 1500);
            } else {
                showMessage(result.message || "Đã xảy ra lỗi.", 'error');
            }
        }
    }

    // Hiển thị thông báo
    function showMessage(message, type) {
        const toast = document.createElement('div');
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        `;
        
        switch(type) {
            case 'success':
                toast.style.backgroundColor = '#28a745';
                break;
            case 'error':
                toast.style.backgroundColor = '#dc3545';
                break;
            case 'info':
                toast.style.backgroundColor = '#17a2b8';
                break;
        }
        
        toast.textContent = message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(toast)) {
                    document.body.removeChild(toast);
                }
            }, 300);
        }, 3000);
    }
</script>
} 