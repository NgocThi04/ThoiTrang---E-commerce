@model Fashion.Models.SanPham
@using System.Globalization

@{
    ViewData["Title"] = Model.Ten;
    var similarProducts = ViewBag.SimilarProducts as List<Fashion.Models.SanPham> ?? new List<Fashion.Models.SanPham>();
    var avgRating = Model.DanhGias?.Any() == true ? Model.DanhGias.Average(d => d.SoSao) : 0;
    var reviewCount = Model.DanhGias?.Count ?? 0;
    var avgRatingString = string.Format(CultureInfo.InvariantCulture, "{0}", avgRating);
    var allImages = new List<string>();
    if (!string.IsNullOrEmpty(Model.DuongDanAnh))
    {
        allImages.Add(Model.DuongDanAnh);
    }
    if (Model.SanPhamAnhs != null)
    {
        allImages.AddRange(Model.SanPhamAnhs.Select(i => i.DuongDan));
    }
}

@section Styles {
    <link rel="stylesheet" href="~/css/Chitietsanpham.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        .stars .bi-star-fill,
        .stars .bi-star-half,
        .stars .bi-star {
            color: #ffc107;
        }

        /* Toast Message Styles */
        .toast-message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 9999;
            transform: translateX(120%);
            transition: transform 0.4s ease-in-out;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        .toast-message.show {
            transform: translateX(0);
        }
        .toast-success {
            background-color: #28a745;
        }
        .toast-error {
            background-color: #dc3545;
        }
    </style>
}

@Html.AntiForgeryToken()

<div class="container">
    <!-- Breadcrumb -->
    <nav class="breadcrumb">
        <a href="@Url.Action("Index", "Home")">Trang Chủ</a>
        <span>›</span>
        <a href="@Url.Action("Index", "SanPham", new { category = "thoi-trang-nam" })">Thời Trang Nam</a>
        <span>›</span>
        <span>@Model.Ten</span>
    </nav>

    <div class="product-detail-container">
        <!-- Product Gallery -->
        <div class="product-gallery">
            <div class="thumbnail-container">
                @foreach (var imageUrl in allImages)
                {
                    <div class="thumbnail-item" onclick="changeMainImage('/@imageUrl')">
                        <img src="/@imageUrl" alt="Thumbnail">
                    </div>
                }
            </div>
            <div class="main-image-container">
                <img src="/@Model.DuongDanAnh" alt="@Model.Ten" id="main-image">
            </div>
        </div>

        <!-- Product Info -->
        <div class="product-info-container">
            <div class="product-header">
                <h1 class="product-title">@Model.Ten</h1>
                <button class="favorite-btn" onclick="toggleFavorite(this, @Model.Id)">
                    <svg fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" /></svg>
                </button>
            </div>

            <div class="product-price-rating">
                <span class="product-price">@Model.Gia.ToString("N0", new CultureInfo("vi-VN")) VNĐ</span>
                <div class="product-rating">
                    <div class="stars">
                        @for (int i = 1; i <= 5; i++)
                        {
                            if (i <= avgRating)
                            {
                                <i class="bi bi-star-fill"></i>
                            }
                            else if (i - 0.5 <= avgRating)
                            {
                                <i class="bi bi-star-half"></i>
                            }
                            else
                            {
                                <i class="bi bi-star"></i>
                            }
                        }
                    </div>
                    <span class="review-count">(@reviewCount Lượt Bán)</span>
                </div>
            </div>

            <div class="option-group">
                <p class="option-label">Color</p>
                <div class="color-options">
                    <div class="color-option active">
                        <img src="/@Model.DuongDanAnh" alt="Color option">
                    </div>
                </div>
            </div>

            <div class="option-group">
                <p class="option-label">Size</p>
                <div class="size-options">
                    @if (Model.KichThuocSanPhams != null)
                    {
                        @foreach (var ktsp in Model.KichThuocSanPhams)
                        {
                            <button class="size-option" data-size="@ktsp.KichThuoc">@ktsp.KichThuoc</button>
                        }
                    }
                </div>
            </div>

            <div class="add-to-cart-row">
                <div class="quantity-selector">
                    <button class="quantity-btn" onclick="updateQuantity(-1)">-</button>
                    <input type="text" class="quantity-input" value="1" min="1" id="quantity-input" readonly>
                    <button class="quantity-btn" onclick="updateQuantity(1)">+</button>
                </div>
                <button class="btn btn-add-to-cart" onclick="addToCart()">Thêm Vào Giỏ Hàng <span style="font-size: 20px;">›</span></button>
            </div>

            <div class="action-buttons">
                <button class="btn btn-buy-now" onclick="buyNow()">Mua Ngay <span style="font-size: 20px;">›</span></button>
            </div>

            <div class="shipping-details">
                <div class="shipping-item"><i class="bi bi-box-seam"></i> Miễn Phí Vận Chuyển Cho Tất Cả Đơn Hàng</div>
                <div class="shipping-item"><i class="bi bi-arrow-repeat"></i> Thời Gian Giao Hàng & Đổi Trả: 3-7 Ngày</div>
            </div>
        </div>
    </div>

    <!-- Product Description -->
    <div class="product-description-section">
        <h2 class="description-title">Mô Tả Sản Phẩm</h2>
        <div class="description-content">
            @if (!string.IsNullOrEmpty(Model.MoTa))
            {
                <p>@Model.Ten Màu Trắng Ngà</p>
                <p>@Model.MoTa.Split('.').FirstOrDefault().</p>
                <ul>
                    <li>Chất liệu: @Model.ChatLieu</li>
                    <li>Màu sắc: Trắng ngà, dễ dàng phối với nhiều trang phục khác nhau.</li>
                    <li>Kiểu dáng: Overshirt, phù hợp cho cả phong cách casual và lịch sự.</li>
                    <li>Chi tiết: Hai túi ngực với nắp cài, cúc cài tinh tế.</li>
                </ul>
                <p>Sản phẩm hoàn hảo cho những buổi đi làm, dạo phố, hoặc các dịp gặp gỡ bạn bè. Dễ dàng kết hợp với quần jeans, quần âu hoặc chân váy để tạo nên phong cách riêng.</p>
            }
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="reviews-section">
        <h2 class="description-title">Đánh Giá</h2>
        @if (Model.DanhGias != null && Model.DanhGias.Any())
        {
            foreach (var review in Model.DanhGias.Take(3))
            {
                <div class="review-item">
                    <div class="review-content">
                        <div class="review-header">
                            <span class="reviewer-name">@(review.NguoiDung?.HoTen ?? "Khách hàng")</span>
                            <div class="stars">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= review.SoSao)
                                    {
                                        <i class="bi bi-star-fill"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star"></i>
                                    }
                                }
                            </div>
                        </div>
                        <p class="review-text">@review.BinhLuan</p>
                        <span class="review-date">@review.NgayTao.ToString("dd/MM/yyyy")</span>
                    </div>
                </div>
            }
             @if (Model.DanhGias?.Count > 3)
            {
                <button class="view-more-btn">Xem Thêm</button>
            }
        }
        else
        {
            <p>Chưa có đánh giá nào cho sản phẩm này.</p>
        }
    </div>

    <!-- Similar Products -->
    <div class="similar-products">
        <h2 class="description-title">Sản Phẩm Tương Tự</h2>
        <div class="products-grid">
             @foreach (var product in similarProducts)
            {
                <a href="@Url.Action("Details", "SanPham", new { id = product.Id })" class="product-card">
                    <img src="/@product.DuongDanAnh" alt="@product.Ten">
                    <div class="product-info">
                        <h3>@product.Ten</h3>
                        <p>@product.Gia.ToString("N0", new CultureInfo("vi-VN")) VNĐ</p>
                    </div>
                </a>
            }
        </div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        checkFavoriteStatus(@Model.Id);
        // Set first thumbnail and size as active
        document.querySelector('.thumbnail-item')?.classList.add('active');
        document.querySelector('.size-option')?.classList.add('active');
    });

    function changeMainImage(src) {
        document.getElementById('main-image').src = src;
        // Update active thumbnail
        document.querySelectorAll('.thumbnail-item').forEach(thumb => {
            thumb.classList.remove('active');
            if (thumb.querySelector('img').src.endsWith(src)) {
                thumb.classList.add('active');
            }
        });
    }

    function updateQuantity(amount) {
        const input = document.getElementById('quantity-input');
        let currentValue = parseInt(input.value);
        currentValue += amount;
        if (currentValue < 1) {
            currentValue = 1;
        }
        input.value = currentValue;
    }

    document.querySelectorAll('.size-option').forEach(button => {
        button.addEventListener('click', function() {
            document.querySelectorAll('.size-option').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
        });
    });

    // Favorite functionality
    function checkFavoriteStatus(productId) {
        const favoriteBtn = document.querySelector('.favorite-btn');
        if (!favoriteBtn) return;
        fetch(`/YeuThich/CheckStatus/${productId}`)
            .then(response => response.json())
            .then(data => {
                if (data.isFavorited) {
                    favoriteBtn.classList.add('favorited');
                } else {
                    favoriteBtn.classList.remove('favorited');
                }
            });
    }

    function toggleFavorite(element, productId) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        const formData = new FormData();
        formData.append('__RequestVerificationToken', token);
        
        fetch(`/YeuThich/Toggle/${productId}`, { 
            method: 'POST', 
            body: formData,
            credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                element.classList.toggle('favorited', data.favorited);
                showMessage(data.favorited ? 'Đã thêm vào yêu thích' : 'Đã xóa khỏi yêu thích', 'success');
            } else if (data.redirectTo) {
                showMessage('Vui lòng đăng nhập', 'error');
                setTimeout(() => window.location.href = data.redirectTo, 1500);
            } else {
                showMessage(data.message || 'Có lỗi xảy ra', 'error');
            }
        });
    }

    // Add to Cart & Buy Now
    function addToCart() {
        const selectedSize = document.querySelector('.size-option.active')?.dataset.size;
        if (!selectedSize) {
            showMessage('Vui lòng chọn kích thước!', 'error');
            return Promise.reject('Vui lòng chọn kích thước');
        }

        const data = {
            sanPhamId: @Model.Id,
            size: selectedSize,
            quantity: parseInt(document.getElementById('quantity-input').value)
        };

        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        return fetch('/GioHang/AddToCart', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': token },
            body: JSON.stringify(data),
            credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(res => {
            if (res.success) {
                showMessage(res.message, 'success');
                return res;
            } else {
                showMessage('Lỗi: ' + res.message, 'error');
                throw new Error(res.message);
            }
        });
    
    }

    async function buyNow() {
        try {
            await addToCart();
            setTimeout(() => window.location.href = '/GioHang', 1000);
        } catch (error) {
            // Error message is already shown by addToCart, just log to console for debugging
            console.error('Không thể thêm vào giỏ hàng trước khi mua ngay:', error);
        }
    }

    // Toast Message
    function showMessage(message, type) {
        const toast = document.createElement('div');
        toast.className = `toast-message toast-${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 500);
        }, 3000);
    }
</script>
}