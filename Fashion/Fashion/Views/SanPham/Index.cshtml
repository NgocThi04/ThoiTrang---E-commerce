@model Fashion.ViewModels.SanPhamPageViewModel

@{
    ViewData["Title"] = "Danh Sách Sản Phẩm";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Sanpham.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
}

<div class="product-container">
    <!-- Sidebar Filters -->
    <form method="get" asp-action="Index" class="sidebar">
        <div class="filter-box">
            <div class="filter-title">Danh Mục Sản Phẩm</div>
            <div class="filter-options-list">
                @foreach (var cat in Model.CategoriesWithCount)
                {
                    <label class="filter-option">
                        <input type="checkbox" class="filter-checkbox" name="danhMucIds" value="@cat.Id" @(Model.SelectedDanhMucIds.Contains(cat.Id) ? "checked" : "") />
                        @cat.Ten<span class="filter-count">(@cat.Count)</span>
                    </label>
                }
            </div>
        </div>
        
        <div class="filter-box">
            <div class="filter-title">Mức Giá</div>
            <div class="filter-options-list">
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="priceRanges" value="100000-200000" @(Model.SelectedPriceRanges.Contains("100000-200000") ? "checked" : "") />
                    100.000 - 200.000 VND
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="priceRanges" value="200000-300000" @(Model.SelectedPriceRanges.Contains("200000-300000") ? "checked" : "") />
                    200.000 - 300.000 VND
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="priceRanges" value="300000-400000" @(Model.SelectedPriceRanges.Contains("300000-400000") ? "checked" : "") />
                    300.000 - 400.000 VND
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="priceRanges" value="400000-500000" @(Model.SelectedPriceRanges.Contains("400000-500000") ? "checked" : "") />
                    400.000 - 500.000 VND
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="priceRanges" value="500000-99999999" @(Model.SelectedPriceRanges.Contains("500000-99999999") ? "checked" : "") />
                    Trên 500.000 VND
                </label>
            </div>
        </div>
        
        <div class="filter-box">
            <div class="filter-title">Sản Phẩm</div>
            <div class="filter-options-list">
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="productFilters" value="popular" @(Model.SelectedProductFilters.Contains("popular") ? "checked" : "") />
                    Phổ Biến
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="productFilters" value="bestseller" @(Model.SelectedProductFilters.Contains("bestseller") ? "checked" : "") />
                    Bán Chạy
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="productFilters" value="newest" @(Model.SelectedProductFilters.Contains("newest") ? "checked" : "") />
                    Mới Nhất
                </label>
                <label class="filter-option">
                    <input type="checkbox" class="filter-checkbox" name="productFilters" value="sale" @(Model.SelectedProductFilters.Contains("sale") ? "checked" : "") />
                    Sale
                </label>
            </div>
        </div>
        
        <div class="filter-box">
            <div class="filter-title">Đánh Giá</div>
            <div class="filter-options-list">
                @for (int i = 5; i >= 1; i--)
                {
                    <label class="filter-option">
                        <input type="checkbox" class="filter-checkbox" name="ratings" value="@i" @(Model.SelectedRatings.Contains(i) ? "checked" : "") />
                        @for (int j = 1; j <= 5; j++)
                        {
                            if (j <= i)
                            {
                                <i class="bi bi-star-fill" style="color:#F7E53C; font-size: 1.1rem;"></i>
                            }
                            else
                            {
                                <i class="bi bi-star" style="color:#F7E53C; font-size: 1.1rem;"></i>
                            }
                        }
                    </label>
                }
            </div>
        </div>
    </form>
    
    <!-- Product Grid -->
    <div class="product-grid">
        @if (Model.SanPhams != null && Model.SanPhams.Any())
        {
            @foreach (var item in Model.SanPhams)
            {
                // Sửa đoạn này để xử lý nullable double đúng cách
                var avgRating = item.DanhGias != null && item.DanhGias.Any() ? item.DanhGias.Average(dg => (double)dg.SoSao) : 0.0;
                var soSao = (int)Math.Round(avgRating);
                var salePercent = (item.GiaGiam.HasValue && item.GiaGiam.Value < item.Gia) ? (int)Math.Round((1 - ((double)item.GiaGiam.Value / (double)item.Gia)) * 100) : 0;
                
                <div class="product-card">
                    <div class="product-image">
                        <a href="@Url.Action("Details", "SanPham", new { id = item.Id })">
                            <img src="@(string.IsNullOrEmpty(item.DuongDanAnh) ? "/images/placeholder.png" : "/" + item.DuongDanAnh)" alt="@item.Ten">
                        </a>
                        <button class="favorite-btn" data-product-id="@item.Id" data-tooltip="Thêm vào yêu thích">
                            <i class="bi bi-heart"></i>
                        </button>
                        @if (salePercent > 0)
                        {
                            <div class="discount-badge">
                                -@salePercent%
                            </div>
                        }
                    </div>
                    <div class="product-info">
                        <p class="product-title">@item.Ten</p>
                        <div class="product-rating">
                            <div>
                                @for (int i = 0; i < soSao; i++)
                                {
                                    <i class="bi bi-star-fill" style="color:#F7E53C;"></i>
                                }
                                @for (int i = soSao; i < 5; i++)
                                {
                                    <i class="bi bi-star" style="color:#F7E53C;"></i>
                                }
                            </div>
                            <span>@item.SoLuongBan Lượt Bán</span>
                        </div>
                        <div class="product-price-row">
                            @if (item.GiaGiam.HasValue && item.GiaGiam.Value < item.Gia)
                            {
                                <span class="original-price">@item.Gia.ToString("N0") VNĐ</span>
                                <span class="current-price">@item.GiaGiam.Value.ToString("N0") VNĐ</span>
                            }
                            else
                            {
                                <span class="current-price">@item.Gia.ToString("N0") VNĐ</span>
                            }
                            <a href="@Url.Action("Details", "SanPham", new { id = item.Id })" class="add-icon" title="Thêm vào giỏ">
                                <i class="bi bi-plus-circle"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div>Không tìm thấy sản phẩm nào phù hợp.</div>
        }
    </div>
</div>

<div class="pagination">
    @if (Model.SanPhams != null && Model.SanPhams.TotalPages > 1)
    {
        <a href="@Url.Action("Index", "SanPham", new { pageNumber = 1 })">Trước</a>
        
        @for (int i = 1; i <= Model.SanPhams.TotalPages; i++)
        {
            <a href="@Url.Action("Index", "SanPham", new { pageNumber = i })" class="@(i == Model.PageIndex ? "active" : "")">@i</a>
        }
        
        <a href="@Url.Action("Index", "SanPham", new { pageNumber = Model.SanPhams.TotalPages })">Sau</a>
    }
</div>

@section Scripts {
    <script>
        // Tự động submit form khi thay đổi checkbox
        document.addEventListener('DOMContentLoaded', function() {
            var filterForm = document.querySelector('form.sidebar');
            if (filterForm) {
                filterForm.querySelectorAll('input[type="checkbox"]').forEach(function(checkbox) {
                    checkbox.addEventListener('change', function() {
                        filterForm.submit();
                    });
                });
            }

            // Kiểm tra trạng thái yêu thích cho các sản phẩm khi load trang
            checkAllFavoriteStatus();

            // Thêm xử lý sự kiện cho nút yêu thích
            var favoriteBtns = document.querySelectorAll('.favorite-btn');
            favoriteBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const productId = this.getAttribute('data-product-id');
                    console.log('Favorite button clicked for product ID:', productId);
                    
                    if (productId) {
                        toggleFavorite(this, productId);
                    }
                });
            });
        });

        // Thêm hàm này để kiểm tra trạng thái ban đầu của tất cả sản phẩm
        function checkAllFavoriteStatus() {
            document.querySelectorAll('.favorite-btn').forEach(btn => {
                const productId = btn.getAttribute('data-product-id');
                if (productId) {
                    fetch(`/YeuThich/CheckStatus/${productId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.isFavorited) {
                                btn.classList.add('active');
                                btn.innerHTML = '<i class="bi bi-heart-fill"></i>';
                                btn.setAttribute('data-tooltip', 'Bỏ khỏi yêu thích');
                            }
                        });
                }
            });
        }

        // Toggle yêu thích
        function toggleFavorite(element, productId) {
            // Lấy anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            
            // Tạo form data để gửi token đúng cách
            const formData = new FormData();
            formData.append('__RequestVerificationToken', token);
            
            fetch(`/YeuThich/Toggle/${productId}`, {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.favorited) {
                        element.classList.add('active');
                        element.innerHTML = '<i class="bi bi-heart-fill"></i>';
                        element.setAttribute('data-tooltip', 'Bỏ khỏi yêu thích');
                        showMessage('Đã thêm vào danh sách yêu thích!', 'success');
                    } else {
                        element.classList.remove('active');
                        element.innerHTML = '<i class="bi bi-heart"></i>';
                        element.setAttribute('data-tooltip', 'Thêm vào yêu thích');
                        showMessage('Đã xóa khỏi danh sách yêu thích!', 'info');
                    }
                } else {
                    if (data.redirectTo) {
                        showMessage('Vui lòng đăng nhập để sử dụng tính năng yêu thích!', 'error');
                        setTimeout(() => {
                            window.location.href = data.redirectTo;
                        }, 1500);
                    } else {
                        showMessage(data.message || 'Có lỗi xảy ra!', 'error');
                    }
                }
            })
            .catch(error => {
                console.error('Error toggling favorite:', error);
                showMessage('Có lỗi xảy ra! Vui lòng thử lại.', 'error');
            });
        }

        // Hiển thị thông báo
        function showMessage(message, type) {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 5px;
                color: white;
                font-weight: bold;
                z-index: 1000;
                transform: translateX(100%);
                transition: transform 0.3s ease;
            `;
            
            switch(type) {
                case 'success':
                    toast.style.backgroundColor = '#28a745';
                    break;
                case 'error':
                    toast.style.backgroundColor = '#dc3545';
                    break;
                case 'info':
                    toast.style.backgroundColor = '#17a2b8';
                    break;
            }
            
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }
    </script>
}